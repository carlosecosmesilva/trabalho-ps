@startuml PandemicGame
left to right direction
skinparam classAttributeIconSize 0

' ENUMS
enum CorDoenca {
  AZUL
  AMARELO
  PRETO
  VERMELHO
}

enum StatusPartida {
  EM_ANDAMENTO
  VITORIA
  DERROTA_SURTOS
  DERROTA_DOENCA
  DERROTA_TEMPO
}

enum FaseTurno {
  ACOES
  COMPRA
  INFECCAO
}

enum TipoCartaJogador {
  CIDADE
  EVENTO
  EPIDEMIA
}

' INTERFACE DO STRATEGY
interface IHabilidadeEspecial {
  + executar(jogador: Jogador, partida: Partida): void
}

class HabilidadeMedico
class HabilidadePesquisadora
class HabilidadeCientista
class HabilidadeOperacoes

IHabilidadeEspecial <|.. HabilidadeMedico
IHabilidadeEspecial <|.. HabilidadePesquisadora
IHabilidadeEspecial <|.. HabilidadeCientista
IHabilidadeEspecial <|.. HabilidadeOperacoes

' CLASSES BASE
class Partida {
  - status: StatusPartida
  - jogadores: List<Jogador>
  - baralhoJogador: Baralho<CartaJogador>
  - baralhoInfeccao: Baralho<CartaInfeccao>
  - descarteJogador: Stack<CartaJogador>
  - descarteInfeccao: Stack<CartaInfeccao>
  - turnoAtual: Turno
  - tabuleiro: Tabuleiro
  + iniciar()
  + verificarCondicoes(): StatusPartida
}

class Turno {
  - jogadorAtual: Jogador
  - faseAtual: FaseTurno
  - acoesRestantes: int
  + verificarAcoesRestantes(): int
  + decrementarAcoes()
  + proximaFase()
}

class Tabuleiro {
  - cidades: List<Cidade>
  - taxaInfeccao: int
  - marcadorSurtos: int
  - curas: Map<CorDoenca, boolean>
  + espalharDoenca()
  + aplicarSurto()
  + obterCidadeAtual(jogador: Jogador): Cidade
}

class Cidade {
  - nome: string
  - cor: CorDoenca
  - cubosDoenca: Map<CorDoenca, int>
  - conexoes: List<Cidade>
  - temBase: boolean
  + adicionarCubo(cor: CorDoenca)
  + removerCubo(cor: CorDoenca)
  + estaConectadaCom(c: Cidade): boolean
}

' JOGADOR E PERSONAGEM UTILIZANDO STRATEGY
class Jogador {
  - personagem: Personagem
  - mao: List<CartaJogador>
  - localizacao: Cidade
  + realizarAcao(acao: string, destino: Cidade)
  + atualizarLocalizacao(destino: Cidade)
  + compartilharCarta(dest: Jogador, carta: CartaJogador)
  + construirBase()
}

abstract class Personagem {
  + nome: string
  - habilidade: IHabilidadeEspecial
  + usarHabilidade(jogador: Jogador, partida: Partida)
}

Personagem --> IHabilidadeEspecial

class Medico
class Pesquisadora
class Cientista
class EspecialistaOperacoes

Personagem <|-- Medico
Personagem <|-- Pesquisadora
Personagem <|-- Cientista
Personagem <|-- EspecialistaOperacoes

' CARTAS
abstract class Carta

class CartaJogador {
  - tipo: TipoCartaJogador
  - cidade: Cidade
}

class CartaInfeccao {
  - cidade: Cidade
  - cor: CorDoenca
}

class CartaEvento {
  - descricao: string
  + ativar()
}

class CartaEpidemia {
  + ativarEpidemia()
}

Carta <|-- CartaJogador
Carta <|-- CartaInfeccao
CartaJogador <|-- CartaEvento
CartaJogador <|-- CartaEpidemia

' BARALHO COMO CLASSE GENERICA
class Baralho<T> {
  - cartas: Stack<T>
  + embaralhar()
  + sacar(): T
  + descartar(carta: T)
}

Baralho <|-- BaralhoCartaJogador
Baralho <|-- BaralhoCartaInfeccao

class BaralhoCartaJogador {
  - cartas: Stack<CartaJogador>
  + embaralhar()
  + sacar(): CartaJogador
  + descartar(carta: CartaJogador)
}

class BaralhoCartaInfeccao {
  - cartas: Stack<CartaInfeccao>
  + embaralhar()
  + sacar(): CartaInfeccao
  + descartar(carta: CartaInfeccao)
}

' RELAÇÕES COM CARDINALIDADES UML PADRÃO
Partida "1" o-- "1" Tabuleiro
Partida "1" o-- "2..4" Jogador
Partida "1" o-- "1" Turno
Partida "1" --> "1" StatusPartida
Partida "1" *-- "1" Baralho

Turno "1" --> "1" Jogador
Turno "1" --> "1" FaseTurno

Tabuleiro "1" o-- "1..*" Cidade
Cidade "1" --> "1..*" Cidade : cidadesConectadas

Cidade "1" --> "1" CorDoenca

Jogador "1" --> "1" Personagem
Jogador "1" --> "1" Cidade
Jogador "1" --> "0..7" CartaJogador

CartaInfeccao "1" --> "1" Cidade
CartaInfeccao "1" --> "1" CorDoenca

CartaJogador "1" --> "1" Cidade
CartaJogador "1" --> "1" TipoCartaJogador

Partida "1" *-- "1" Baralho : baralhoJogador
Partida "1" *-- "1" Baralho : baralhoInfeccao

Baralho "1" *-- "0..*" Carta : cartas

@enduml